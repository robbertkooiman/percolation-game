<!DOCTYPE html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title data-i18n-key="page-title">Network Games</title>

  <link rel="icon" href="data:,">
  <link rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css"
        integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2"
        crossorigin="anonymous">
  <link rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css">
  <link rel="stylesheet" href="<%= URL_PREFIX %>/css/flag-icon.min.css">
  <link rel="stylesheet" href="<%= URL_PREFIX %>/css/pg.css">
  <style>
    .mw-25 {
      max-width: 25% !important;
    }

    .spinner-border.spinner-border-sm {
      vertical-align: -.125rem; /* copy .bi style */
    }
  </style>
</head>
<body>
  <%- include('lang-controls', {url: url}); %>
  <div class="container">
    <div class="row d-lg-none"></div>
    <div class="row flex-column align-items-center" id="alerts"></div>

    <div class="row mt-5 mt-md-4 mt-lg-3">
      <div class="col-12">
        <h1 data-i18n-key="index-title"></h1>
        <p data-i18n-key="welcome-1"></p>
        <div class="list-group" id="rooms">
<% rooms.forEach((room) => { %>
          <a class="list-group-item list-group-item-action<%=
                  room.id < 0 ? ' d-none' : ' d-flex'
                %> justify-content-between align-items-center"
             href="<%= URL_PREFIX %>/r/<%= room.path %>"
             id="r-<%= room.path %>"
             data-name="<%= room.name %>">
            <span>
              <%= room.name %>
              <span class="badge badge-info badge-pill ml-3">
                <span class="num-nodes"><%= room.numNodes %></span>
                <span data-i18n-key="nodes"></span>
              </span>
            </span>
            <div class="btn-group" role="group" aria-label="room actions">
              <button type="button" class="btn btn-dark" data-action="admin" data-i18n-key="manage-percolate" data-i18n-attr="title">
                <i class="bi bi-toggles"></i>
              </button>
              <button type="button" class="btn btn-dark" data-action="trash" data-i18n-key="delete" data-i18n-attr="title">
                <i class="bi bi-trash-fill"></i>
              </button>
            </div>
          </a>
<% }); %>
        </div>
      </div>
      <div class="col-12 mt-3 d-flex justify-content-end align-items-start">
        <form class="form-inline align-items-start" autocomplete="off">
          <div class="custom-control custom-checkbox mt-sm-2 mr-sm-3">
            <input type="checkbox" class="custom-control-input" id="unique-ip">
            <label class="custom-control-label" for="unique-ip"
                data-i18n-key="restrict-multiple-nodes"></label>
          </div>
          <div>
            <input type="text" class="form-control mr-sm-3" id="room-name"
                data-i18n-key="room-name" data-i18n-attr="placeholder">
            <div class="invalid-feedback"></div>
            <div class="valid-feedback"></div>
          </div>
        </form>
        <button class="btn btn-dark" id="btn-add-room" disabled>
          <i class="bi bi bi-plus-lg"></i>
          <div class="spinner-border spinner-border-sm d-none" role="status">
            <span class="sr-only">Loading...</span>
          </div>
        </button>
      </div>
    </div>

    <div class="row mt-5">
      <div class="col-12">
        <h1 data-i18n-key="index-title-about"></h1>
        <p data-i18n-key="about"></p>
      </div>
      <div class="col-12 d-flex justify-content-between align-items-center">
        <img class="mw-25" src="<%= URL_PREFIX %>/img/NPlogo.png">
        <img class="mw-25" src="<%= URL_PREFIX %>/img/nvvw.jpg">
        <img class="mw-25" src="<%= URL_PREFIX %>/img/TUe.png">
      </div>
    </div>
  </div><!-- /.container -->

  <script src="<%= URL_PREFIX %>/js/i18n.js"></script>
  <script src="<%= URL_PREFIX %>/socket.io/socket.io.js"></script>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
          integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj"
          crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js"
          integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx"
          crossorigin="anonymous"></script>
  <script>
    const URL_PREFIX = '/' + window.location.pathname.split('/')[1];


    function createAlert(message, type = 'danger', title = false) {
      if (title === false)  title = i18n.t('error') + '.'
      var $alert = $(`
        <div class="alert alert-${type} mt-3 alert-dismissible fade show" role="alert">
          <strong>${title}</strong> ${message}
          <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
      `);
      $('#alerts').append($alert);
      $alert.alert();
    }

    function handleAjaxError(req) {
      if (req.readyState === 4 && req.status === 400) {
        createAlert(req.getResponseHeader('message'));
      }
    }

    function indicateRoomLoading(loading) {
      $addRoom.children().each((i, el) => {
        var $el = $(el);
        $el.toggleClass('d-none', ($el.is('i') === loading));
      });
    }

    function makeId(length) {
      var result = [],
          chars = 'abcdefghijklmnopqrstuvwxyz0123456789',
          charsLen = chars.length;
      for (let i = 0; i < length; ++i) {
        result.push(chars.charAt(Math.floor(Math.random() * charsLen)));
      }
      return result.join('');
    }

    function showRoomNameInvalid(msgId) {
      $roomName.addClass('is-invalid').removeClass('is-valid');
      $roomName.siblings('.invalid-feedback')
          .text(i18n.t(`room-feedback-${msgId}`));
    }


    // remove first item from rooms list, it is a template
    const $list = $('#rooms'),
          $roomTemplate = $list.children().eq(0);
    $roomTemplate.remove().removeClass('d-none').addClass('d-flex');

    // let user enter a secret when clicking a button in the rooms list
    $list.on('click', 'input', (event) => event.preventDefault());
    $list.on('click', 'button', function(event) {
      event.preventDefault();

      var $btn = $(this),
          roomPath = $btn.closest('a').attr('id').substr(2),
          roomURL = $btn.closest('a').attr('href'),
          $input = $(`<input type="password" class="form-control mr-sm-3"
              name="secret" placeholder="${i18n.t('secret')}">`),
          $cancel = $(`<button class="btn btn-dark" name="cancel">
              <i class="bi bi-x-lg"></i></button>`),
          $form = $(`<form class="form-inline" method="post" action="${roomURL}"
              autocomplete="off" />`);
      if ($btn.data('error') === 'invalid_secret') {
        $input.addClass('is-invalid');
      }
      $btn.parent().replaceWith($form.append($input).append($cancel));
      $cancel.on('click', (event) => {
        event.preventDefault();
        $form.replaceWith($roomTemplate.find('.btn-group').clone());
      });
      $input.on('keypress', (event) => {
        if (event.keyCode === 13) { // prevent enter key from activating
          event.preventDefault();   // the outer anchor, instead submit
          if ($btn.data('action') === 'admin') {
            $form.submit();         // the form that the input is in, or...
          } else { // trash action  // ...an event to ask to remove the room
            socket.emit('remove-room', roomPath, $input.val());
          }
        }
      }).focus();
    });

<% if (search.has('error') && search.get('error') === 'invalid_secret' &&
            search.has('room')) { %>
    $('#r-<%= search.get('room') %> button')
      .data('error', '<%= search.get('error') %>')
      .click();
<% } %>

    // open a socket.io connection, update list on changes
    const socket = io({
      path: '/percolation-game/socket.io',
      transports: ['polling']
    });
    socket.on('connect', () => {
      $('#btn-add-room').prop('disabled', false);
    });

    socket.on('add-room-error', (name, err) => {
      indicateRoomLoading(false);
      if (err === 'name_taken') {
        showRoomNameInvalid('taken');
      }
    });

    socket.on('node-added', (room, node) => {
      var $span = $(`#r-${room} .num-nodes`);
      $span.text(parseInt($span.text(), 10) + 1);
    });

    socket.on('remove-room-error', (room, err) => {
      if (err === 'invalid_secret') {
        $(`#r-${room} input[name="secret"]`).addClass('is-invalid');
      }
    });

    socket.on('restart', (room, graph) => {
      $(`#r-${room} .num-nodes`).text(graph.nodes.length);
    });

    socket.on('room-added', (room) => {
      indicateRoomLoading(false);
      $roomName.addClass('is-valid');
      createAlert(i18n.t('secret-is').replace(/%s/g, $roomName.data('secret')), 'primary', i18n.t('room-created'));

      let $room = $roomTemplate.clone();
      $room.data('name', room.name);
      $room.attr('href', `${URL_PREFIX}/r/${room.path}`);
      $room.attr('id', `r-${room.path}`);
      $room.find('span:eq(0)').contents().get(0).nodeValue = room.name;
      $room.find('.num-nodes').text(room.numNodes);

      let inserted = false;
      $list.children().each(function() {
        let $otherRoom = $(this);
        if (room.name.localeCompare($otherRoom.data('name')) < 0) {
          $otherRoom.before($room);
          inserted = true;
          return false; // break
        }
      });
      if (!inserted)  $list.append($room);
    });

    socket.on('room-removed', (room) => {
      $(`#r-${room}`).remove();
    });

    // enable adding a room
    const $roomName = $('#room-name'),
          $uniqueIp = $('#unique-ip'),
          $addRoom = $('#btn-add-room');
    $addRoom.prev('form').on('submit', (event) => {
      event.preventDefault();
      $addRoom.click();
    });
    $addRoom.on('click', () => {
      if ($roomName.val().trim() === '') {
        showRoomNameInvalid('empty');
      } else {
        indicateRoomLoading(true);
        let secret = makeId(8);
        $roomName.data('secret', secret);
        socket.emit('add-room', $roomName.val().trim(), secret,
            $uniqueIp.is(':checked'));
      }
    });
    $roomName.on('keyup', (event) => {
      if (event.keyCode !== 13) { // ignore enter key in input for submitting
        $roomName.removeClass('is-invalid is-valid');
      }
    });
  </script>
</body>
